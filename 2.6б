#include <iostream>
using namespace std;

struct Node {
    double value;
    Node* prev;
    Node* next;

    Node(double val) : value(val), prev(nullptr), next(nullptr) {}
};

struct List {
    Node* head;
    Node* tail;

    List() : head(nullptr), tail(nullptr) {}

    void append(double value) {
        Node* newNode = new Node(value);
        if (tail == nullptr) {
            head = tail = newNode;
        }
        else {
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
    }

    double findMaxOfMinPairs(int n) {
        Node* left = head;
        Node* right = tail;

        
        double maxOfMin = min(left->value, right->value);

        left = left->next;
        right = right->prev;

        for (int i = 1; i < n; ++i) {
            double minVal = min(left->value, right->value);
            maxOfMin = max(maxOfMin, minVal);

            left = left->next;
            right = right->prev;
        }

        return maxOfMin;
    }

    double min(double a, double b) {
        return (a < b) ? a : b;
    }

    double max(double a, double b) {
        return (a > b) ? a : b;
    }
};

int main() {
    int n;
    cout << " Enter n: ";
    cin >> n;

    int size = 2 * n;
    List list;

    cout << "enter " << size << " numbers: ";
    for (int i = 0; i < size; ++i) {
        double value;
        cin >> value;
        list.append(value);
    }

    double result = list.findMaxOfMinPairs(n);
    cout << "result: " << result << endl;

    return 0;
}
