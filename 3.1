#include <iostream>
#include <fstream>
#include <cstdlib>
#include <ctime>
using namespace std;

void create_f_file(const string& f_path, long long sets, int count_per_set) {
    ofstream f(f_path);
    if (!f.is_open()) {
        cerr << "Ошибка при создании файла f.txt!" << endl;
        return;
    }

    srand(static_cast<unsigned int>(time(0)));

    for (long long i = 0; i < sets; ++i) {
       
        for (int j = 0; j < count_per_set; ++j) {
            int negative_number = -(rand() % 100 + 1);
            f << negative_number << " "; 
        }
        for (int j = 0; j < count_per_set; ++j) {
            int positive_number = rand() % 100 + 1;
            f << positive_number << " "; 
        }
        f << endl; 
    }

    f.close();
    cout << "File f.txt is ready " << sets * count_per_set * 2 << " numbers!" << endl; 
}

void create_g_file(const string& f_path, const string& g_path, long long sets, int count_per_set) {
    ifstream f(f_path);
    ofstream g(g_path);

    if (!f.is_open()) {
        cerr << "Error!" << endl;
        return;
    }
    if (!g.is_open()) {
        cerr << "Error!" << endl;
        f.close();
        return;
    }

    int number;
    int positive_count = 0;
    int negative_count = 0;
    int* positive = new int[count_per_set];
    int* negative = new int[count_per_set];

    for (long long i = 0; i < sets; ++i) {
        positive_count = 0;
        negative_count = 0;

        for (int j = 0; j < count_per_set * 2; ++j) {
            f >> number; 
            if (number > 0) {
                positive[positive_count++] = number;
            }
            else {
                negative[negative_count++] = number;
            }
        }

        int p_index = 0, n_index = 0;
        while (p_index < positive_count || n_index < negative_count) {
            for (int k = 0; k < 2 && p_index < positive_count; ++k) {
                g << positive[p_index++] << " "; 
            }
            for (int k = 0; k < 2 && n_index < negative_count; ++k) {
                g << negative[n_index++] << " "; 
            }
        }
        g << endl; 
    }

    delete[] positive;
    delete[] negative;

    f.close();
    g.close();
}

void print_file(const string& file_path, const string& file_name) {
    ifstream file(file_path);
    if (!file.is_open()) {
        cerr << "Error " << file_name << "!" << endl;
        return;
    }

    cout << "Contents of " << file_name << ":" << endl;
    int number;
    while (file >> number) { 
        cout << number << " ";
    }
    cout << endl << endl;

    file.close();
}

int main() {
    long long sets;
    int count_per_set;

    cout << "Enter the number of sets of positive and negative numbers to generate: ";
    cin >> sets;

    cout << "Enter the number of consecutive positive and negative numbers per set:: ";
    cin >> count_per_set;

    create_f_file("f.txt", sets, count_per_set);

    print_file("f.txt", "f.txt");

    create_g_file("f.txt", "g.txt", sets, count_per_set);
    cout << "File g.txt is ready!" << endl;

    print_file("g.txt", "g.txt");

    return 0;
}
